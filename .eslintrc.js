module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.eslint.json',
    sourceType: 'module',
    ecmaVersion: 'latest',
  },
  plugins: ['sort-keys-fix', 'import', 'unused-imports', '@typescript-eslint'],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
    es6: true,
    commonjs: true,
  },
  ignorePatterns: ['.eslintrc.js', 'src/migrations/*.ts'],
  rules: {
    eqeqeq: ['error', 'always', { null: 'never' }],
    curly: 'error',
    // 'func-style': 'warn', 関数を禁止するかどうか
    'import/default': 'off',
    'import/extensions': [
      'error',
      'never',
      { json: 'always', svg: 'always', gen: 'always' },
    ],
    'import/first': 'error',
    'import/newline-after-import': 'error',
    'import/no-duplicates': 'error',
    'import/order': [
      'error',
      { 'newlines-between': 'always', alphabetize: { order: 'asc' } },
    ],
    'no-restricted-syntax': [
      'error',
      {
        selector: 'TSEnumDeclaration',
        message: "Don't use enums. Use union types instead.",
      },
      {
        selector: 'TSInterfaceDeclaration',
        message: "Don't use interfaces. Use types instead.",
      },
      {
        selector: 'WithStatement',
        message: "Don't use with statements.",
      },
    ],
    'arrow-parens': 'error',
    'arrow-spacing': 'error',
    'generator-star-spacing': 'error',
    'no-duplicate-imports': 'error',
    'no-useless-computed-key': 'error',
    'no-useless-rename': 'error',
    'no-var': 'error',
    'object-shorthand': 'error',
    'prefer-arrow-callback': 'error',
    'prefer-const': 'error',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    'rest-spread-spacing': 'error',
    'template-curly-spacing': 'error',
    'yield-star-spacing': 'error',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/no-non-null-assertion': 'error',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'typeLike',
        format: ['PascalCase'],
        leadingUnderscore: 'allow',
      },
      {
        selector: ['variableLike', 'memberLike'],
        format: ['strictCamelCase', 'PascalCase'],
        leadingUnderscore: 'allow',
      },
    ],
  },
}
